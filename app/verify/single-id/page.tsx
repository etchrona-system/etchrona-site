"use client";
import React, { useState } from "react";
import { QRCodeSVG } from "qrcode.react";

export default function SingleImagePage() {
  const [file, setFile] = useState<File | null>(null);
  const [hash, setHash] = useState("");
  const [originalFilename, setOriginalFilename] = useState("");
  const [customFilename, setCustomFilename] = useState("");
  const [purpose, setPurpose] = useState("");
  const [method, setMethod] = useState("");
  const [authCode, setAuthCode] = useState("");
  const [timestamp, setTimestamp] = useState("");
  const [submitted, setSubmitted] = useState(false);

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const fileList = e.target.files;
    if (!fileList || fileList.length === 0) return;

    const selectedFile = fileList[0];
    setFile(selectedFile);
    setOriginalFilename(selectedFile.name);

    const buffer = await selectedFile.arrayBuffer();
    const hashBuffer = await crypto.subtle.digest("SHA-256", buffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    setHash(hashHex);
  };

  const handleSubmit = () => {
    if (!hash || !authCode) {
      alert("Please upload an image and enter an authorization code.");
      return;
    }
    const confirm = window.confirm(
      "You are about to seal the semantic record and authorization code. Once submitted, it cannot be modified and is only for future verification. Continue?"
    );
    if (!confirm) return;
    const now = new Date().toISOString();
    setTimestamp(now);
    setSubmitted(true);
    console.log({
      hash,
      originalFilename,
      customFilename,
      purpose,
      method,
      authCode,
      timestamp: now,
    });
  };

return (
  <div className="max-w-2xl mx-auto p-6 space-y-6">
    <h2 className="text-2xl font-bold text-gray-800">Etchrona - Single Image Semantic Sealing</h2>

    {/* Upload */}
    <div className="space-y-2">
      <label className="block font-semibold text-gray-700">Upload Image</label>
      <input
        type="file"
        accept="image/*"
        onChange={handleFileChange}
        className="w-full border border-gray-300 p-2 rounded"
      />
    </div>

    {/* Hash Info */}
    {hash && (
      <div className="bg-gray-100 p-4 rounded shadow-sm">
        <p className="text-sm"><strong>Original Filename:</strong> {originalFilename}</p>
        <p className="text-sm"><strong>SHA-256 Hash:</strong> {hash}</p>
      </div>
    )}

    {/* Semantic Form */}
    <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Custom Filename (optional)</label>
        <input
          type="text"
          className="w-full border p-2 rounded"
          value={customFilename}
          onChange={(e) => setCustomFilename(e.target.value)}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Usage Purpose</label>
        <textarea
          placeholder="e.g., AI test data, illustration asset..."
          className="w-full border p-2 rounded"
          value={purpose}
          onChange={(e) => setPurpose(e.target.value)}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Creation Method</label>
        <textarea
          placeholder="e.g., Generated by DALL·E, Midjourney, or Photoshop"
          className="w-full border p-2 rounded"
          value={method}
          onChange={(e) => setMethod(e.target.value)}
          maxLength={1000}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Authorization Code</label>
        <input
          type="text"
          placeholder="Required for trace access"
          className="w-full border p-2 rounded"
          value={authCode}
          onChange={(e) => setAuthCode(e.target.value)}
        />
      </div>

      <button
        type="submit"
        className="bg-blue-600 hover:bg-blue-700 transition text-white font-semibold px-4 py-2 rounded shadow"
      >
        Confirm and Submit
      </button>
    </form>

    {/* Result */}
    {submitted && (
      <div className="mt-6 p-6 bg-green-50 border border-green-300 rounded text-center space-y-2">
        <p className="font-semibold text-green-700">✅ Verification Complete</p>
        <p className="text-sm"><strong>Timestamp:</strong> {timestamp}</p>
        <div className="mt-4 flex justify-center">
          <div className="inline-block bg-white p-4 rounded shadow">
            <QRCodeSVG value={`https://etchrona.com/result?hash=${hash}`} />
            <p className="text-xs mt-2 text-gray-500">Scan to verify on Etchrona</p>
          </div>
        </div>
      </div>
    )}
  </div>
);

}
